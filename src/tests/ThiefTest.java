/*
 * TCSS 360 Group Project
 */
package tests;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.beans.PropertyChangeListener;
import java.util.Random;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import model.Thief;
import tests.mockclasses.MockDungeonCharacter;

/**
 * Test cases for Thief.
 * 
 * @author Justin Le, Anna Brewer
 * @version 21 Mar 2025
 */
class ThiefTest {
	
	/** Mock Random used for testing. */
	private Random myMockRandom;

	/** The Thief being tested. */
	private Thief myTestThief;

	/** The enemy character used for attacks. */
	private MockDungeonCharacter myTestEnemy;

	/** Mock listener to test property change events. */
	private PropertyChangeListener myMockListener;

	/**
     * Initializes the test Thief, enemy, and mock random before each test.
     */
	@BeforeEach
	void setUp() {
		myMockRandom = mock(Random.class);
		myTestThief = new Thief(myMockRandom);
		myTestEnemy = new MockDungeonCharacter(myMockRandom);
		myMockListener = mock(PropertyChangeListener.class);
		myTestThief.addPropertyChangeListener(myMockListener);
	}
	
	/**
	 * Test special attack: Thief deals damage and triggers an extra turn event.
	 */
	@Test
	void testSpecialAttackGetExtraTurn() {
		// Using 1.0 here to force both attack and extra turn paths, even though it's not generated by Random in real use
		when(myMockRandom.nextDouble(0.0, 1.0)).thenReturn(1.0);
		when(myMockRandom.nextInt(20, 41)).thenReturn(20);

		myTestEnemy.setCurHealthPoints(100);
		myTestThief.specialAttack(myTestEnemy);

		assertEquals(80, myTestEnemy.getCurHealthPoints(), "Enemy should take 20 damage.");
		verify(myMockListener).propertyChange(argThat(e ->
			e.getPropertyName().equals("extraTurnReceived") &&
			e.getOldValue().equals(false) &&
			e.getNewValue().equals(true)
		));
		verifyNoMoreInteractions(myMockListener);
	}
	
	/**
	 * Test special attack: Thief deals damage but does not get an extra turn.
	 */
	@Test
	void testSpecialAttackDoNormalAttack() {
		when(myMockRandom.nextDouble(0.0, 1.0)).thenReturn(0.5);
		when(myMockRandom.nextInt(20, 41)).thenReturn(20);

		myTestEnemy.setCurHealthPoints(100);
		myTestThief.specialAttack(myTestEnemy);

		assertEquals(80, myTestEnemy.getCurHealthPoints(), "Enemy should take 20 damage.");
		verify(myMockListener, never()).propertyChange(argThat(e ->
			e.getPropertyName().equals("extraTurnReceived")
		));
		verifyNoMoreInteractions(myMockListener);
	}
	
	/**
	 * Test special attack: Thief fails to attack and triggers specialDidNothing.
	 */
	@Test
	void testSpecialAttackDoNothing() {
		when(myMockRandom.nextDouble(0.0, 1.0)).thenReturn(0.0);

		myTestEnemy.setCurHealthPoints(100);
		myTestThief.specialAttack(myTestEnemy);

		assertEquals(100, myTestEnemy.getCurHealthPoints(), "Enemy should take no damage.");
		verify(myMockListener).propertyChange(argThat(e ->
			e.getPropertyName().equals("specialDidNothing") &&
			e.getOldValue().equals(false) &&
			e.getNewValue().equals(true)
		));
		verifyNoMoreInteractions(myMockListener);
	}
}
